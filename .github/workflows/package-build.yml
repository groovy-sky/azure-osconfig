name: Package Build
# name: Package

on:
  push:
  # workflow_call:
  #   inputs:
  #     artifact:
  #       description: The artifact to create containing the packages.
  #       type: string
  #       required: false
  #       default: "package"
  #     build-type:
  #       description: The type of build to perform (Debug | Release).
  #       type: string
  #       required: false
  #       default: "Release"
env:
  build-type: Release
  artifact: package
  threshold: 10

jobs:
  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      tweak: ${{ steps.version.outputs.tweak }}
    steps:
      # TODO: get the major, minor, and patch version
      # REVIEW: why is it hr/min in the tweak ???
      - name: Get version
        id: version
        run: |
          echo "::set-output name=tweak::$(date +'%Y%m%d%H%M')"

  build:
    name: Build
    # TODO: this should be a self-hosted runner
    runs-on: ubuntu-latest
    needs: version
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu18.04, ubuntu20.04, debian9]
        variant: [
            { arch: arm, platform: linux/arm/v7 },
            { arch: arm64, platform: linux/arm64/v8 },
            { arch: amd64, platform: linux/amd64 },
          ]
    env:
      container-workspace: /azure-osconfig

    steps:
      - run: echo "Build package..."
      # - uses: actions/checkout@v3
      #   with:
      #     submodules: recursive
      #     clean: true

      # - name: Run container
      #   id: container
      #   uses: ./.github/actions/container-run
      #   with:
      #     username: ${{ secrets.ACR_CLIENT_ID }}
      #     password: ${{ secrets.ACR_CLIENT_SECRET }}
      #     os: ${{ matrix.os }}
      #     arch: ${{ matrix.variant.arch }}
      #     platform: ${{ matrix.variant.platform }}
      #     mount: ${{ github.workspace }}:${{ env.container-workspace }}

      # - name: Generate build
      #   uses: ./.github/actions/container-exec
      #   with:
      #     container: ${{ steps.container.outputs.id }}
      #     cmd: |
      #       mkdir build && cd build
      #       cmake ../src -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DTWEAK_VERSION=${{ needs.version.outputs.tweak }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -DBUILD_AGENTS=ON -G Ninja

      # - name: Build azure-osconfig
      #   uses: ./.github/actions/container-exec
      #   with:
      #     container: ${{ steps.container.outputs.id }}
      #     working-directory: ${{ env.container-workspace }}/build
      #     cmd: cmake --build . --config ${{ env.build-type }}

      # - name: Run cpack
      #   uses: ./.github/actions/container-exec
      #   with:
      #     container: ${{ steps.container.outputs.id }}
      #     working-directory: ${{ env.container-workspace }}/build
      #     cmd: cpack -G DEB

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.artifact }}
      #     path: ./build/osconfig_*

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [build, version]
    env:
      report: package-report
      package-sizes: package-sizes.json
    steps:
      - uses: actions/checkout@v3

      - name: Download previous report
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir ./previous && cd ./previous
          run=$(echo ${{ github.run_number }} - 1 | bc)
          gh run download -n package-report-$run
          exit 0

      # TODO: ignore failures from previous download step (and remove always() from subsequent steps)

      - uses: actions/download-artifact@v2
        if: always()
        with:
          name: ${{ env.artifact }}
          path: ./packages

      - name: List package sizes
        if: always()
        id: current
        run: |
          output="footprint.json"

          find ./packages/*.deb |
          while read package; do
            name=$(basename $package)

            # Get the distro and architecture from the package name
            distro=$(echo $name | cut -d_ -f3)
            arch=$(echo $name | cut -d_ -f4-5)

            case $distro in
              ("bionic")  distro="ubuntu-18.04";;
              ("focal")   distro="ubuntu-20.04";;
              ("stretch") distro="debian-9";;
            esac

            case $arch in
              ("x86_64")  arch="amd64";;
              ("aarch64") arch="arm64";;
              ("armv7l")  arch="arm";;
            esac

            # Get the size of the package
            size=$(ls -l $package | awk '{print $5}')

            # Create the package JSON object
            jq -n --arg target "$distro-$arch" --arg size "$size" '{"target": $target, "size": $size | tonumber}'
          done | jq -s '.' > "$output"

          echo ::set-output name=sizes::"$output"

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: package-report-${{ github.run_number }}
          path: ./${{ steps.current.outputs.sizes }}

      - name: Generate report
        if: always()
        id: report
        run: |
          current=${{ steps.current.outputs.sizes }}
          previous=./previous/footprint.json

          report=report.md

          failures=0

          # Set the header of the report table
          echo "| Target | Current (*bytes*) | Previous (*bytes*) | Delta (*bytes*) |" > $report
          echo "| --- | --- | --- | --- |" >> $report

          for package in $(jq -c '.[]' $current); do
            target=$(echo "$package" | jq -r '.target')
            version=$(echo "$package" | jq -r '.version')
            curr_size=$(echo "$package" | jq -r '.size')

            if [[ $(jq -c --arg target "$target" '.[] | select(.target == $target)' $previous) ]]; then
              prev_size=$(jq -r --arg target "$target" '.[] | select(.target == $target) | .size' $previous)
              delta=$(($curr_size - $prev_size))

              if [[ $delta -gt 0 ]]; then
                  delta="+$delta"
              elif [[ $delta -lt 0 ]]; then
                  delta="-$delta"
              fi

              # Check if the delta is within the threshold
              percent=$(echo "scale=2; $delta / $prev_size * 100" | bc)
              if [[ $percent -gt ${{ env.threshold }} ]]; then
                  delta="**$delta** :x:"
                  echo ::error file=$package,title="Package delta threshold exceeded" "Package $target increased by $percent% ($delta bytes)"
                  failures=$((failures + 1))
              fi

              echo "| $target | $curr_size | $prev_size | $delta |" >> $report
            else
              echo ::warning file=$target,title="New/missing package artifact" "'$target' is new or missing from the previous build."
            fi
          done

          echo ::set-output name=markdown::"$report"

          if [[ $failures -gt 0 ]]; then
              exit 1
          fi

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ env.report }}
          path: ${{ steps.report.outputs.markdown }}

      - name: Create report
        uses: ./.github/actions/check-run
        with:
          name: Package report
          # TODO: use the full version string in this title
          title: Footprint (${{ needs.version.outputs.tweak }})
          markdown: ${{ steps.report.outputs.markdown }}
