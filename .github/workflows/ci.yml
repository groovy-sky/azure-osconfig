name: CI

on:
  pull_request:
    paths:
      - src/**
      - .github/workflows/ci.yml
      - "!src/test/**" # Ignore changes to E2E tests

  push:

env:
  BUILD_TYPE: Release
  MOUNT: /azure-osconfig
  REGISTRY: ghcr.io

# TODO: collective build (used by unit tests and functional tests)

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu18.04, ubuntu20.04, debian9]
        variant: [{ arch: amd64 }]
    container:
      image: ghcr.io/azure/azure-osconfig/${{ matrix.os }}-${{ matrix.variant.arch }}:latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          clean: true

      - name: CMake
        run: |
          mkdir build && cd build
          cmake ../src -DCMAKE_build-type=${{ env.BUILD_TYPE }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=ON -G Ninja

      - name: Build
        run: |
          cmake --build ./build --config ${{ env.BUILD_TYPE }}

      - name: Run unit tests
        id: test
        continue-on-error: true
        run: |
          log=${{ matrix.os }}-${{ matrix.variant.arch }}.log
          report=${{ matrix.os }}-${{ matrix.variant.arch }}.xml

          echo ::set-output name=log::$log
          echo ::set-output name=xml::$report

          ctest --verbose > ../$log

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        with:
          path: ./build/gtest-output
          output: ${{ steps.test.outputs.xml }}

      - uses: actions/upload-artifact@v2
        with:
          name: unit-test
          path: |
            ${{ steps.test.outputs.log }}
            ${{ steps.test.outputs.xml }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.variant.arch }}
          path: build

  build-arm:
    name: Build (ARM)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu18.04, ubuntu20.04, debian9]
        variant:
          [
            { arch: arm, platform: linux/arm/v7 },
            { arch: arm64, platform: linux/arm64/v8 },
          ]
        # TODO: skip broken build
        # exclude:
        #   - os: ubuntu20.04
        #     variant: { arch: arm, platform: linux/arm/v7 }

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          clean: true

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run container
        id: container
        uses: ./.github/actions/container-run
        with:
          registry: ${{ env.REGISTRY }}
          container: azure/azure-osconfig/${{ matrix.os }}-${{ matrix.variant.arch }}
          platform: ${{ matrix.variant.platform }}
          mount: ${{ github.workspace }}:${{ env.MOUNT }}

      - name: CMake
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          cmd: |
            mkdir build && cd build
            cmake ../src -DCMAKE_build-type=${{ env.BUILD_TYPE }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=ON -G Ninja

      - name: Build
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: cmake --build . --config ${{ env.BUILD_TYPE }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.variant.arch }}
          path: ${{ github.workspace }}/build

      - name: Set test output
        id: test
        run: |
          echo ::set-output name=log::${{ matrix.os }}-${{ matrix.variant.arch }}.log
          echo ::set-output name=xml::${{ matrix.os }}-${{ matrix.variant.arch }}.xml

      - name: Run ctest
        uses: ./.github/actions/container-exec
        continue-on-error: true
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: ctest --verbose > ../${{ steps.test.outputs.log }}

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        with:
          path: ./build/gtest-output
          output: ${{ steps.test.outputs.xml }}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: unit-test
          path: |
            ${{ steps.test.outputs.log }}
            ${{ steps.test.outputs.xml }}

      - name: Publish test report
        uses: dorny/test-reporter@v1
        with:
          name: Report / Unit Test (${{ matrix.os }}-${{ matrix.variant.arch }})
          path: ${{ steps.test.outputs.xml }}
          reporter: java-junit

  func-test:
    name: Functional test
    runs-on: ${{ matrix.target }}
    strategy:
      fail-fast: true
      matrix:
        target: ["ubuntu-18.04", "ubuntu-20.04"] # TODO: Add debian9
    needs: build

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}-amd64
          path: build

      - name: Test
        run: |
          ./modulestest --gtest_output=xml:gtest-output/${{ matrix.target }}.xml

      # - name: Publish test report
      #   uses: dorny/test-reporter@v1
      #   with:
      #     name: Report / Functional (${{ matrix.target }})
      #     path: ./build/gtest-output/TestRecipes.xml
      #     reporter: java-junit

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: func-test
          path: ./gtest-output/${{ matrix.target }}.xml

  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/azure/azure-osconfig/ubuntu20.04-amd64:latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Build azure-osconfig
  #       run: |
  #         cmake -S ./src -B ./build -DCMAKE_build-type=Debug -DBUILD_AGENTS=OFF -DBUILD_TESTS=ON -DCOVERAGE=ON -G Ninja
  #         cmake --build ./build --config Debug
  #     - name: Run ctest
  #       working-directory: ./build
  #       run: ctest

  #     - name: Run gcovr
  #       working-directory: ./build
  #       run: gcovr -r ../src . -e ../src/agents/pnp/ --xml coverage.xml

  #     - name: Generate markdown report
  #       uses: irongut/CodeCoverageSummary@v1.2.0
  #       with:
  #         filename: ./build/coverage.xml
  #         fail_below_min: true
  #         format: markdown
  #         hide_complexity: true
  #         output: both
  #         badge: true
  #         thresholds: "60 80"

  #     - name: Create coverage report
  #       uses: ./.github/actions/check-run
  #       with:
  #         name: Coverage report
  #         title: Code coverage
  #         markdown: ./code-coverage-results.md

  #     - uses: actions/upload-artifact@v2
  #       if: always()
  #       with:
  #         name: code-coverage
  #         path: |
  #           ./build/coverage.xml
  #           ./code-coverage-results.md
