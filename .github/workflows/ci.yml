name: CI

# on:
#   push:

env:
  BUILD_TYPE: Release
  MOUNT: /azure-osconfig
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, debian-9]
        variant:
          [
            { arch: arm, platform: linux/arm/v7 },
            { arch: arm64, platform: linux/arm64/v8 },
            { arch: amd64, platform: linux/amd64 },
          ]
        exclude:
          - os: ubuntu-20.04
            variant: { arch: arm, platform: linux/arm/v7 }

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          clean: true

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run container
        id: container
        uses: ./.github/actions/container-run
        with:
          registry: ${{ env.REGISTRY }}
          container: azure/azure-osconfig/${{ matrix.os }}-${{ matrix.variant.arch }}
          platform: ${{ matrix.variant.platform }}
          mount: ${{ github.workspace }}:${{ env.MOUNT }}

      - name: Generate build
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          cmd: |
            mkdir build && cd build
            cmake ../src -DCMAKE_build-type=${{ env.BUILD_TYPE }} -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=ON -DBUILD_AGENTS=ON -G Ninja

      - name: Build azure-osconfig
        uses: ./.github/actions/container-exec
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Cache build
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/build
          key: ${{ matrix.os }}-${{ matrix.variant.arch }}-${{ env.BUILD_TYPE }}

      - name: Set test output
        id: test
        run: |
          echo "log=${{ matrix.os }}-${{ matrix.variant.arch }}.log" >> $GITHUB_OUTPUT
          echo "xml=${{ matrix.os }}-${{ matrix.variant.arch }}.xml" >> $GITHUB_OUTPUT

      - name: Run ctest
        uses: ./.github/actions/container-exec
        continue-on-error: true
        with:
          container: ${{ steps.container.outputs.id }}
          working-directory: ${{ env.MOUNT }}/build
          cmd: ctest --verbose > ../${{ steps.test.outputs.log }}

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        with:
          path: ./build/gtest-output
          output: ${{ steps.test.outputs.xml }}

      - name: Publish test report
        uses: dorny/test-reporter@v1
        with:
          name: Report / Unit test (${{ matrix.os }}-${{ matrix.variant.arch }})
          path: ${{ steps.test.outputs.xml }}
          reporter: java-junit

      - uses: actions/upload-artifact@v2
        with:
          name: unit-test
          path: |
            ${{ steps.test.outputs.log }}
            ${{ steps.test.outputs.xml }}

  func-test:
    name: Functional test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, debian-9]
        arch: [amd64]

    steps:
      - name: Restore build
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/build
          key: ${{ matrix.os }}-${{ matrix.arch }}-${{ env.BUILD_TYPE }}

      - name: Run functional tests
        id: test
        working-directory: ${{ github.workspace }}/build
        continue-on-error: true
        run: |
          mkdir -p /etc/osconfig/

          xml=${{ matrix.os }}-${{ matrix.arch }}.xml
          log=${{ matrix.os }}-${{ matrix.arch }}.log

          ./modulestest --gtest_output=xml:gtest-output/TestRecipes.xml > $log

          echo "log=$log" >> $GITHUB_OUTPUT
          echo "xml=$xml" >> $GITHUB_OUTPUT

      - name: Generate test report
        uses: ./.github/actions/gtest-xml
        with:
          path: ./build/gtest-output
          output: ${{ steps.test.outputs.xml }}

      - name: Publish test report
        uses: dorny/test-reporter@v1
        with:
          name: Report / Func test (${{ matrix.os }}-${{ matrix.arch }})
          path: ${{ steps.test.outputs.xml }}
          reporter: java-junit

      - uses: actions/upload-artifact@v2
        with:
          name: func-test
          path: |
            ${{ steps.test.outputs.log }}
            ${{ steps.test.outputs.xml }}

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/azure/azure-osconfig/ubuntu-20.04-amd64:latest
    steps:
      - uses: actions/checkout@v3

      - name: Build azure-osconfig
        run: |
          cmake -S ./src -B ./build -DCMAKE_build-type=Debug -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DBUILD_TESTS=ON -DBUILD_SAMPLES=OFF -DBUILD_AGENTS=OFF -DCOVERAGE=ON -G Ninja
          cmake --build ./build --config Debug
      - name: Run ctest
        working-directory: ./build
        run: ctest

      - name: Run gcovr
        working-directory: ./build
        run: gcovr -r ../src . -e ../src/agents/pnp/ --xml coverage.xml

      - name: Generate markdown report
        uses: irongut/CodeCoverageSummary@v1.2.0
        with:
          filename: ./build/coverage.xml
          fail_below_min: true
          format: markdown
          hide_complexity: true
          output: both
          badge: true
          thresholds: "60 80"

      - name: Create coverage report
        uses: ./.github/actions/check-run
        with:
          name: Coverage report
          title: Code coverage
          markdown: ./code-coverage-results.md

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: code-coverage
          path: |
            ./build/coverage.xml
            ./code-coverage-results.md
